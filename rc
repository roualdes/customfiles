#!/usr/bin/env bb

(require '[clojure.java.shell :refer [sh]]
         '[clojure.tools.cli :refer [parse-opts]]
         '[clojure.string :as string]
         '[clojure.java.io :as io]
         '[clojure.pprint :refer [pprint]])

(def cli-options
  [["-t" "--test" "Do a test run before living dangerously"]
   ["-h" "--help"]])

(defn usage [options-summary]
  (->> ["Sync (local -> remote) or copy (remote -> local) (sub-)folders within"
        "~/dos, which itself is referenced as . no matter what pwd says."
        ""
        "Subfolders of ~/dos are referenced by path relative to ~/dos, e.g."
        "research/mcbayes"
        ""
        "Usage: rc [options] action path"
        ""
        "The following example will *test* a run of: copy the contents of"
        "website from local to remote deleting from remote what does not "
        "exist on local."
        ""
        "Example: rc -t sync website"
        ""
        "Options:"
        options-summary
        ""
        "Actions:"
        "  sync    Sync up to DigitalOcean storage (deletes files on remote)"
        "  copy    Copy down from DigitalOcean storage (never deletes files)"
        ""]
       (string/join \newline)))

(defn error-msg [errors]
  (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn not-dot [path]
  (if (= "." path) "" path))

(defn local [path]
  (str (System/getProperty "user.home") "/dos/" (not-dot path)))

(defn remote [path]
  (str "dos:roualdes/" (not-dot path)))

(defn validate-args
  "Validate command line arguments. Either return a map indicating the program
  should exit (with an error message, and optional ok status), or a map
  indicating the action the program should take and the options provided."
  [args]
  (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    (cond
      (:help options) ; help => exit OK with usage summary
      {:exit-message (usage summary) :ok? true}
      errors ; errors => exit with description of errors
      {:exit-message (error-msg errors)}
      (let [action (first arguments)
            f (second arguments)]
        (and (= 2 (count arguments))
             (and (#{"sync" "copy"} action)
                  (if f (.exists (io/as-file (local f)))))))
      {:action (first arguments) :path (second arguments)  :options options}
      :else ; failed  custom validation => exit with usage summary
      {:exit-message (usage summary)})))

(defn exit [status msg]
  (println msg)
  (System/exit status))

;; TODO seperate options
;; if verbose, print command that was called as well
(defn test-flags [opts]
  (let [logfile (str (System/getProperty "user.home") "/rclonelog.txt")]
    (if (.exists (io/file logfile))
      (io/delete-file logfile))
    (if (:test opts)
      ["--verbose"
       "--dry-run"
       (str "--log-file=" logfile)]
      [])))

(def sync-flags
  ["--exclude=node_modules/**"
   "--exclude=.DS_Store"
   "--exclude=.p.kdbx.lock"
   "--exclude=.Rhistory"
   "--exclude=.juliahistory"
   "--delete-excluded"])

(defn sync [path opts]
  (pprint
   (apply sh
          (flatten
           [;"echo" ;; for debugging
            "rclone"
            sync-flags
            (test-flags opts)
            "sync"
            (local path)
            (remote path)]))))

(defn copy [path opts]
  (pprint
   (apply sh
          (flatten
           [;"echo" ;; for debugging
            "rclone"
            (test-flags opts)
            "copy"
            (remote path)
            (local path)]))))

(defn run [args]
  (let [{:keys [path action options exit-message ok?]} (validate-args args)]
    (if exit-message
      (exit (if ok? 0 1) exit-message)
      (case action
        "sync" (sync path options)
        "copy" (copy path options)))))

(run *command-line-args*)
